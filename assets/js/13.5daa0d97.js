(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{365:function(a,t,v){"use strict";v.r(t);var s=v(25),e=Object(s.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h2",{attrs:{id:"数据排序并去重-es6"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据排序并去重-es6"}},[a._v("#")]),a._v(" 数据排序并去重(es6)")]),a._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),v("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Set")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("arr"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[a._v("sort")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),v("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("a"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("b")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" a"),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("b"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),v("h2",{attrs:{id:"如何理解-mvvm-原理？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何理解-mvvm-原理？"}},[a._v("#")]),a._v(" 如何理解 MVVM 原理？")]),a._v(" "),v("p",[a._v("简单理解就是通过数据劫持机制来观察数据是否被变化，如果变化更新视图，来形成一个数据双向绑定的效果")]),a._v(" "),v("h2",{attrs:{id:"响应式数据的原理是什么？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#响应式数据的原理是什么？"}},[a._v("#")]),a._v(" 响应式数据的原理是什么？")]),a._v(" "),v("p",[a._v("Vue 是一个数据驱动视图的框架，它的响应数据主要依赖 "),v("code",[a._v("Object.defineProperty()")]),a._v(" 这个方法进行数据劫持。这是个ES5里面提供的方法，函数内有 "),v("code",[a._v("get()")]),a._v(" 和 "),v("code",[a._v("set()")]),a._v(" 两个方法，当访问的时候，自动调用 get ，赋值的时候自动调用 set ，但是这个方法是 ES5 中一个无法 shim 的特性，所以不支持 IE8 及以下的浏览器")]),a._v(" "),v("p",[a._v("ES6 也提供了一个方法 Proxy ，这个方法也可以实现，效果比 "),v("code",[a._v("Object.defineProperty()")]),a._v(" 更好")]),a._v(" "),v("h2",{attrs:{id:"组件中的-data-为什么是一个函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#组件中的-data-为什么是一个函数"}},[a._v("#")]),a._v(" 组件中的 data 为什么是一个函数?")]),a._v(" "),v("p",[a._v("因为JS本身特质的问题，如果 data 不是函数而是一个对象的话，两个实例都引用一个对象，只要修改了其中一个，另外一个也会改变，为了避免这个问题，data 设置成函数，拥有自己的作用域")]),a._v(" "),v("h2",{attrs:{id:"vue-组件如何通信？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-组件如何通信？"}},[a._v("#")]),a._v(" Vue 组件如何通信？")]),a._v(" "),v("p",[a._v("Vue 组件通信分为父子传值 props ,子父传值 $emit ,兄弟传值 eventbus ,或者使用 Vuex 做数据通信")]),a._v(" "),v("h2",{attrs:{id:"什么是作用域插槽？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是作用域插槽？"}},[a._v("#")]),a._v(" 什么是作用域插槽？")]),a._v(" "),v("p",[a._v("官方文档解释：有的时候你希望提供的组件带有一个可从子组件获取数据的可复用的插槽。")]),a._v(" "),v("h2",{attrs:{id:"简述-vue-中-diff-算法原理？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#简述-vue-中-diff-算法原理？"}},[a._v("#")]),a._v(" 简述 Vue 中 diff 算法原理？")]),a._v(" "),v("blockquote",[v("p",[a._v("关于 diff 算法：diff算法即是差异查找算法，对比两个 dom 树不同点，相同的复用，不同的重新渲染")])]),a._v(" "),v("h2",{attrs:{id:"v-for-中为什么要用-key"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#v-for-中为什么要用-key"}},[a._v("#")]),a._v(" v-for 中为什么要用 key ?")]),a._v(" "),v("p",[a._v("为了避免重复渲染，造成不必要的性能消耗")]),a._v(" "),v("p",[v("code",[a._v("v-for")]),a._v(" 更新已渲染元素列表时，默认采用"),v("code",[a._v("就地复用")]),a._v("策略，列表数据修改的时候，他会根据 key 值去判断某个值是否修改，如果修改，则重新渲染这一项，否则复用之前的元素。")]),a._v(" "),v("h2",{attrs:{id:"什么是虚拟dom"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是虚拟dom"}},[a._v("#")]),a._v(" 什么是虚拟DOM")]),a._v(" "),v("p",[a._v("直接操作 DOM 性能消耗太大，所以通过 JS 实现了一个与 DOM 树对应的虚拟 dom对象，他的出现解决了直接操作 DOM 的性能消耗，避免了大量无谓的计算量")]),a._v(" "),v("h2",{attrs:{id:"css-loader-和-style-loader-有什么区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#css-loader-和-style-loader-有什么区别"}},[a._v("#")]),a._v(" css-loader 和 style-loader 有什么区别")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("css-loader 是处理 css 文件的")])]),a._v(" "),v("li",[v("p",[a._v("style-loader 把 js 中 import 导入的样式文件代码，打包到 js 文件中，运行 js 文件时，将样式自动插入到"),v("code",[a._v("<style>")]),a._v("标签中")])]),a._v(" "),v("li",[v("p",[a._v("mini-css-extract-plugin 把 js 中 import 导入的样式文件代码，打包成一个实际的 css 文件，结合 html-webpack-plugin，在 dist/index.html 中以 link 插入 css 文件；默认将 js 中 import 的多个 css 文件，打包时合成一个")])])]),a._v(" "),v("h2",{attrs:{id:"http-协议的特点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-协议的特点"}},[a._v("#")]),a._v(" http 协议的特点")]),a._v(" "),v("p",[a._v("无状态，无连接")]),a._v(" "),v("h2",{attrs:{id:"dom-事件模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dom-事件模型"}},[a._v("#")]),a._v(" DOM 事件模型")]),a._v(" "),v("p",[a._v("冒泡和捕获")]),a._v(" "),v("h2",{attrs:{id:"dom-事件流"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dom-事件流"}},[a._v("#")]),a._v(" DOM 事件流")]),a._v(" "),v("p",[a._v("冒泡阶段 > 目标阶段 > 捕获阶段")]),a._v(" "),v("h2",{attrs:{id:"h5新特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#h5新特性"}},[a._v("#")]),a._v(" H5新特性")]),a._v(" "),v("p",[a._v("出现了一些具有语义性的标签 header footer nav article")]),a._v(" "),v("p",[a._v("video audio canvas")]),a._v(" "),v("p",[a._v("新的表单元素 email url time date")]),a._v(" "),v("h2",{attrs:{id:"c3中的伪类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#c3中的伪类"}},[a._v("#")]),a._v(" C3中的伪类")]),a._v(" "),v("ul",[v("li",[a._v("first-of-type")]),a._v(" "),v("li",[a._v("last-of-type")]),a._v(" "),v("li",[a._v("only-child")]),a._v(" "),v("li",[a._v("falst-child")]),a._v(" "),v("li",[a._v("nth-child")]),a._v(" "),v("li",[a._v("last-child")])]),a._v(" "),v("h2",{attrs:{id:"c3中唯一引入的伪元素是"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#c3中唯一引入的伪元素是"}},[a._v("#")]),a._v(" C3中唯一引入的伪元素是")]),a._v(" "),v("p",[a._v(":selection 被用户高亮的部分")]),a._v(" "),v("h2",{attrs:{id:"vue生命周期"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue生命周期"}},[a._v("#")]),a._v(" Vue生命周期")]),a._v(" "),v("ul",[v("li",[a._v("beforeCreate")]),a._v(" "),v("li",[a._v("created")]),a._v(" "),v("li",[a._v("beforeMount")]),a._v(" "),v("li",[a._v("mounted")]),a._v(" "),v("li",[a._v("beforeUpdate")]),a._v(" "),v("li",[a._v("updated")]),a._v(" "),v("li",[a._v("beforeDestroy")]),a._v(" "),v("li",[a._v("destroyed")])]),a._v(" "),v("h2",{attrs:{id:"v-if和v-show的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#v-if和v-show的区别"}},[a._v("#")]),a._v(" v-if和v-show的区别")]),a._v(" "),v("p",[a._v("v-show 和 v-if 都是用来显示隐藏元素，v-if 还有一个 v-else 配合使用，两者达到的效果都一样，性能方面却有很大的区别。 v-if 绝对是更消耗性能的，因为 v-if 在显示隐藏过程中有DOM的添加和删除，v-show 就简单多了，只是操作 css 。")]),a._v(" "),v("h2",{attrs:{id:"axios和-ajax-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#axios和-ajax-的区别"}},[a._v("#")]),a._v(" axios和 ajax 的区别")]),a._v(" "),v("p",[a._v("axios 是通过 promise 封装 XML 达到效果，ajax 就一种单纯的异步请求技术")]),a._v(" "),v("h2",{attrs:{id:"ajax的缺点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#ajax的缺点"}},[a._v("#")]),a._v(" ajax的缺点")]),a._v(" "),v("ul",[v("li",[a._v("存在安全问题")]),a._v(" "),v("li",[a._v("对搜索引擎支持较弱")]),a._v(" "),v("li",[a._v("不是很好的支持移动设备")])]),a._v(" "),v("h2",{attrs:{id:"ajax有什么数据类型格式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#ajax有什么数据类型格式"}},[a._v("#")]),a._v(" ajax有什么数据类型格式")]),a._v(" "),v("p",[a._v("json 和字符串, XML")]),a._v(" "),v("h2",{attrs:{id:"什么是跨域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是跨域"}},[a._v("#")]),a._v(" 什么是跨域")]),a._v(" "),v("p",[a._v("跨域就是没有遵守同源策略进行请求，协议，域名，端口三者不同，就是一个域下的文件要去请求另外一个域下的文件")]),a._v(" "),v("h2",{attrs:{id:"解决跨域的方式有哪几种？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#解决跨域的方式有哪几种？"}},[a._v("#")]),a._v(" 解决跨域的方式有哪几种？")]),a._v(" "),v("p",[a._v("jsonp：常用方法，通过动态添加script标签来达到跨域的效果")]),a._v(" "),v("p",[a._v("CORS：在发送请求的时候，添加一个特殊的请求头，来达成效果")]),a._v(" "),v("p",[a._v("服务端跨域：在前后端分离的项目中可以借助服务器实现跨域，具体做法是：前端向本地服务器发送请求，本地服务器代替前端再向api服务器接口发送请求进行服务器间通信，本地服务器其实就是个中转站的角色，再将响应的数据返回给前端，下面用node.js做一个示例")]),a._v(" "),v("p",[a._v("postmessage 跨域，H5新添加的一种方法，类似于 jsonp ，动态添加 iframe 标签来达到效果")]),a._v(" "),v("h2",{attrs:{id:"你用过什么后台语言-java-基本类型有哪几个"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#你用过什么后台语言-java-基本类型有哪几个"}},[a._v("#")]),a._v(" 你用过什么后台语言,java,基本类型有哪几个")]),a._v(" "),v("p",[a._v("Java 基本类型共有八种，基本类型可以分为三类，字符类型 char，布尔类型 boolean 以及数值类型 byte、short、int、long、float、double。")]),a._v(" "),v("h2",{attrs:{id:"element-ui用的哪个版本"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#element-ui用的哪个版本"}},[a._v("#")]),a._v(" element-ui用的哪个版本")]),a._v(" "),v("p",[a._v("element-ui: ^2.13.0")]),a._v(" "),v("p",[a._v("vant: ^2.4.1")]),a._v(" "),v("h2",{attrs:{id:"bootstrap用过吗，按钮有那几个样式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#bootstrap用过吗，按钮有那几个样式"}},[a._v("#")]),a._v(" bootstrap用过吗，按钮有那几个样式")]),a._v(" "),v("p",[a._v("默认，成功，提交，危险，警告")]),a._v(" "),v("h2",{attrs:{id:"ajax中信息是如何在浏览器和服务器之间进行传递的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#ajax中信息是如何在浏览器和服务器之间进行传递的"}},[a._v("#")]),a._v(" ajax中信息是如何在浏览器和服务器之间进行传递的")]),a._v(" "),v("p",[a._v("Ajax 与服务端是通过字符串或者 xml 进行交互的")]),a._v(" "),v("h2",{attrs:{id:"line-height-15px-150-1-5-1-5em"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#line-height-15px-150-1-5-1-5em"}},[a._v("#")]),a._v(" line-height: 15px 150% 1.5 1.5em")]),a._v(" "),v("p",[a._v("有单位时，子元素继承了父元素计算得出的行距；无单位时继承了系数，子元素会分别计算各自行距（推荐使用）。")]),a._v(" "),v("h2",{attrs:{id:"es6提供了什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#es6提供了什么"}},[a._v("#")]),a._v(" ES6提供了什么")]),a._v(" "),v("p",[v("code",[a._v("let")]),a._v(" "),v("code",[a._v("const")]),a._v(" "),v("code",[a._v("() => {}")]),a._v(" 有了块级作用域 解构赋值 模板字符串")]),a._v(" "),v("h2",{attrs:{id:"promise-和-ajax-有什么区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#promise-和-ajax-有什么区别"}},[a._v("#")]),a._v(" promise 和 ajax 有什么区别")]),a._v(" "),v("p",[a._v("ajax是异步的。promise 是同步的，并且解决了 ajax 回调函数造成的回调地狱问题")]),a._v(" "),v("h2",{attrs:{id:"什么是闭包"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是闭包"}},[a._v("#")]),a._v(" 什么是闭包")]),a._v(" "),v("p",[a._v("简单点理解就是，一个函数内可以访问另外一个函数内的私有变量，但是大量使用会造成内存泄漏，并不是很友好")]),a._v(" "),v("h2",{attrs:{id:"怎么解决内存泄漏"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#怎么解决内存泄漏"}},[a._v("#")]),a._v(" 怎么解决内存泄漏")]),a._v(" "),v("p",[a._v("尽量少使用闭包，js自己有垃圾回收机制")]),a._v(" "),v("h2",{attrs:{id:"js如何实现一个栈"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#js如何实现一个栈"}},[a._v("#")]),a._v(" js如何实现一个栈")]),a._v(" "),v("p",[a._v("数组的添加和删除")]),a._v(" "),v("h2",{attrs:{id:"如何删除一个-dom-节点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何删除一个-dom-节点"}},[a._v("#")]),a._v(" 如何删除一个 DOM 节点")]),a._v(" "),v("p",[a._v("removeChild")]),a._v(" "),v("p",[a._v("innerHTML")]),a._v(" "),v("h2",{attrs:{id:"前端开发流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前端开发流程"}},[a._v("#")]),a._v(" 前端开发流程")]),a._v(" "),v("p",[a._v("开会，敲定项目，分配任务，开发，抽取剥离，自测联调，提交验收，交接说明，维护")]),a._v(" "),v("h2",{attrs:{id:"vue-的优点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-的优点"}},[a._v("#")]),a._v(" Vue 的优点")]),a._v(" "),v("p",[a._v("MVVM 数据双向绑定，数据驱动视图，指令化操作,组件化，可复用")]),a._v(" "),v("h2",{attrs:{id:"jquery-和-jquery-ui的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jquery-和-jquery-ui的区别"}},[a._v("#")]),a._v(" JQuery 和 JQuery-UI的区别")]),a._v(" "),v("p",[a._v("jquery-ui 只是 jquery 的一个插件，是一个 UI 框架，\njQuery 本身注重于后台，没有漂亮的界面，而 jQueryUI 则补充了前者的不足")]),a._v(" "),v("h2",{attrs:{id:"前端的性能优化，"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前端的性能优化，"}},[a._v("#")]),a._v(" 前端的性能优化，")]),a._v(" "),v("p",[a._v("减少请求，合并小的文件，精灵图的使用")]),a._v(" "),v("h2",{attrs:{id:"雪碧图的原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#雪碧图的原理"}},[a._v("#")]),a._v(" 雪碧图的原理")]),a._v(" "),v("p",[a._v("为了减少http请求，把多张小的照片，组合成一张，可以有效减少请求次数")]),a._v(" "),v("h2",{attrs:{id:"定位有哪几种"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#定位有哪几种"}},[a._v("#")]),a._v(" 定位有哪几种")]),a._v(" "),v("p",[a._v("绝对定位，相对定位，静态定位，固定定位")]),a._v(" "),v("h2",{attrs:{id:"node使用多吗，sql增删改查"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#node使用多吗，sql增删改查"}},[a._v("#")]),a._v(" node使用多吗，SQL增删改查")]),a._v(" "),v("p",[a._v("insert  value")]),a._v(" "),v("p",[a._v("delete  form")]),a._v(" "),v("p",[a._v("update  set")]),a._v(" "),v("p",[a._v("select  form")]),a._v(" "),v("h2",{attrs:{id:"什么是面向对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是面向对象"}},[a._v("#")]),a._v(" 什么是面向对象")]),a._v(" "),v("p",[a._v("我个人的理解，面向对象开发就是，把一个任务看作一个人，这个人他会干什么，有什么，放在程序里就是，把这个任务看成一个对象，对象有什么属性，有什么方法，这些，属性方法都是可以复用的，这就很友好")]),a._v(" "),v("h2",{attrs:{id:"vue第一次渲染会触发哪几个钩子函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue第一次渲染会触发哪几个钩子函数"}},[a._v("#")]),a._v(" vue第一次渲染会触发哪几个钩子函数")]),a._v(" "),v("p",[a._v("beforeCreate，created，beforeMount，mounted")]),a._v(" "),v("h2",{attrs:{id:"dom渲染在哪个阶段完成"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dom渲染在哪个阶段完成"}},[a._v("#")]),a._v(" DOM渲染在哪个阶段完成")]),a._v(" "),v("p",[a._v("mounted")]),a._v(" "),v("h2",{attrs:{id:"什么是-dom-什么是-bom"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是-dom-什么是-bom"}},[a._v("#")]),a._v(" 什么是 DOM 什么是 BOM")]),a._v(" "),v("ul",[v("li",[a._v("DOM 是文档对象模型")]),a._v(" "),v("li",[a._v("BOM 是浏览器对象模型")])]),a._v(" "),v("p",[a._v("都提供了一些供开发者使用的 API")]),a._v(" "),v("h2",{attrs:{id:"说一下keep-alive"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#说一下keep-alive"}},[a._v("#")]),a._v(" 说一下keep-alive")]),a._v(" "),v("p",[a._v("keep-alive 是 vue 中提供的动态缓存机制，可以缓存设置了的页面不被销毁")]),a._v(" "),v("h2",{attrs:{id:"git-常用命令有哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-常用命令有哪些"}},[a._v("#")]),a._v(" git 常用命令有哪些")]),a._v(" "),v("p",[a._v("git add")]),a._v(" "),v("p",[a._v("git commit")]),a._v(" "),v("p",[a._v("git log")]),a._v(" "),v("p",[a._v("git status")]),a._v(" "),v("p",[a._v("git push")]),a._v(" "),v("p",[a._v("git branch")]),a._v(" "),v("h2",{attrs:{id:"call-和-apply-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#call-和-apply-的区别"}},[a._v("#")]),a._v(" call 和 apply 的区别")]),a._v(" "),v("p",[a._v("两者都可以改变this指向，但是传递参数的形式不一向，\n第一个参数都是指向谁，但是apply的第二个参数是个数组，参数放在数组中")]),a._v(" "),v("h2",{attrs:{id:"什么是事件委托"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是事件委托"}},[a._v("#")]),a._v(" 什么是事件委托")]),a._v(" "),v("p",[a._v("就是本来该自己干的事情，但是委托给了别人帮忙执行，")]),a._v(" "),v("h2",{attrs:{id:"如何阻止默认行为"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何阻止默认行为"}},[a._v("#")]),a._v(" 如何阻止默认行为")]),a._v(" "),v("p",[a._v("e.preventDefault")]),a._v(" "),v("p",[a._v("e.stopPropageation")]),a._v(" "),v("h2",{attrs:{id:"如何让盒子往右平移200像素，在放大2倍"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何让盒子往右平移200像素，在放大2倍"}},[a._v("#")]),a._v(" 如何让盒子往右平移200像素，在放大2倍")]),a._v(" "),v("p",[a._v("transform:translate 平移\ntransform:scale 放大")]),a._v(" "),v("h2",{attrs:{id:"解决移动端300ms的延迟"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#解决移动端300ms的延迟"}},[a._v("#")]),a._v(" 解决移动端300ms的延迟")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("禁用缩放功能")])]),a._v(" "),v("li",[v("p",[a._v("更改默认视口宽度")])]),a._v(" "),v("li",[v("p",[a._v("使用touch-action事件来解决这个问题")])])]),a._v(" "),v("h2",{attrs:{id:"new事件经历了什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#new事件经历了什么"}},[a._v("#")]),a._v(" new事件经历了什么")]),a._v(" "),v("p",[a._v("1.开辟一个空间，this指向这个空间")]),a._v(" "),v("p",[a._v("2.执行this.xx = xx")]),a._v(" "),v("p",[a._v("3.隐式的返回this")]),a._v(" "),v("h2",{attrs:{id:"es6中箭头函数和普通函数有什么区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#es6中箭头函数和普通函数有什么区别"}},[a._v("#")]),a._v(" ES6中箭头函数和普通函数有什么区别")]),a._v(" "),v("p",[a._v("更加简洁高效")]),a._v(" "),v("p",[a._v("箭头函数中没有this")]),a._v(" "),v("p",[a._v("没有arguments")]),a._v(" "),v("p",[a._v("不能作为构造函数使用")]),a._v(" "),v("p",[a._v("没有原型prototype")]),a._v(" "),v("h2",{attrs:{id:"同步和异步的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#同步和异步的区别"}},[a._v("#")]),a._v(" 同步和异步的区别")]),a._v(" "),v("p",[a._v("同步会堵塞下面代码的运行")]),a._v(" "),v("p",[a._v("异步不会产生这样的问题")]),a._v(" "),v("h2",{attrs:{id:"渐进式框架的理解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#渐进式框架的理解"}},[a._v("#")]),a._v(" 渐进式框架的理解")]),a._v(" "),v("p",[a._v("Vue就是渐进式开发")]),a._v(" "),v("p",[a._v("我的理解是：渐进式开发，代表就是组件化，它本身提供了很多组件，插件，你可以引入一两个组件来使用，也可以使用提供的全家桶来开发项目，是充满选择性的。")]),a._v(" "),v("h2",{attrs:{id:"vue-和原生-js-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-和原生-js-的区别"}},[a._v("#")]),a._v(" Vue 和原生 JS 的区别")]),a._v(" "),v("p",[a._v("原生 JS 是直接操作 DOM 元素的")]),a._v(" "),v("p",[a._v("但是 Vue 的本意是不操作 DOM 元素，只改变数据，由数据驱动视图的。")]),a._v(" "),v("h2",{attrs:{id:"es5-和-es6-的区别是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#es5-和-es6-的区别是什么"}},[a._v("#")]),a._v(" ES5 和 ES6 的区别是什么")]),a._v(" "),v("p",[a._v("ES6 是 ES5 的进阶版本，代码行为更为严谨")]),a._v(" "),v("p",[a._v("提供了 let 和 const 定义变量，可以产生作用域")]),a._v(" "),v("h2",{attrs:{id:"promise是同步执行的还是异步执行的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#promise是同步执行的还是异步执行的"}},[a._v("#")]),a._v(" promise是同步执行的还是异步执行的")]),a._v(" "),v("p",[a._v("是同步执行的但是 .then() 方法是异步执行的")]),a._v(" "),v("h2",{attrs:{id:"promise有哪几种状态"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#promise有哪几种状态"}},[a._v("#")]),a._v(" promise有哪几种状态")]),a._v(" "),v("p",[a._v("三种状态")]),a._v(" "),v("p",[a._v("执行中\n已成功\n已失败")]),a._v(" "),v("h2",{attrs:{id:"foreach-for-in-和for-of-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#foreach-for-in-和for-of-的区别"}},[a._v("#")]),a._v(" forEach For in 和for of 的区别")]),a._v(" "),v("p",[a._v("forEach 是 ES6 提交的用来遍历数组的一个方法，但是中途不能停止")]),a._v(" "),v("p",[v("code",[a._v("for in")]),a._v(" 是用来遍历对象的，和 "),v("code",[a._v("for of")]),a._v(" 的区别是，"),v("code",[a._v("for of")]),a._v(",可以用来遍历字符串")]),a._v(" "),v("h2",{attrs:{id:"你知道-symbol-吗？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#你知道-symbol-吗？"}},[a._v("#")]),a._v(" 你知道 Symbol 吗？")]),a._v(" "),v("p",[a._v("这是个 Es6 新增的基本类型")]),a._v(" "),v("p",[a._v("Symbol 的诞生代表着独一无二，是为了防止对象属性名冲突而产生的，是通过 symbol 函数产生的，但是不能使用 new 否则会报错的")]),a._v(" "),v("h2",{attrs:{id:"const-的变量可以改变"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#const-的变量可以改变"}},[a._v("#")]),a._v(" const 的变量可以改变")]),a._v(" "),v("p",[a._v("const 不能保证 object, array 等类型的数据不可改变")]),a._v(" "),v("h2",{attrs:{id:"node-的优点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#node-的优点"}},[a._v("#")]),a._v(" node 的优点")]),a._v(" "),v("p",[a._v("单线程")]),a._v(" "),v("p",[a._v("异步I/O，提升并发量")]),a._v(" "),v("p",[a._v("事件驱动")]),a._v(" "),v("h2",{attrs:{id:"清除浮动有哪几种"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#清除浮动有哪几种"}},[a._v("#")]),a._v(" 清除浮动有哪几种")]),a._v(" "),v("p",[a._v("chear:both")]),a._v(" "),v("p",[a._v("BFC：overflow:hidden")]),a._v(" "),v("h2",{attrs:{id:"css引入的方式有哪几种"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#css引入的方式有哪几种"}},[a._v("#")]),a._v(" Css引入的方式有哪几种")]),a._v(" "),v("p",[a._v("内联，内嵌，外联，导入（@imponent）")]),a._v(" "),v("h2",{attrs:{id:"优雅降级与渐进增强"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优雅降级与渐进增强"}},[a._v("#")]),a._v(" 优雅降级与渐进增强")]),a._v(" "),v("p",[a._v("因为高级的css会有兼容性问题，所以为了全部兼容浏览器，有了优雅降级与渐进增强，优雅降级是由繁入简，渐进增强是由简入繁，先实现最简单的效果，然后在增加特效")]),a._v(" "),v("h2",{attrs:{id:"js中那些数据返回false"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#js中那些数据返回false"}},[a._v("#")]),a._v(" JS中那些数据返回false")]),a._v(" "),v("p",[a._v('0，null，undefined,false,""')]),a._v(" "),v("h2",{attrs:{id:"typeof-和-instanceof-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#typeof-和-instanceof-的区别"}},[a._v("#")]),a._v(" typeof 和 instanceof 的区别")]),a._v(" "),v("p",[a._v("typeof 是个符号，可以检测数据是什么类型的")]),a._v(" "),v("p",[a._v("instanceof 是个关键字，可以检测这是不是个对象，是个什么类型的对象")]),a._v(" "),v("h2",{attrs:{id:"深拷贝，浅拷贝"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝，浅拷贝"}},[a._v("#")]),a._v(" 深拷贝，浅拷贝")]),a._v(" "),v("p",[a._v("浅拷贝只能拷贝一层数据，比如一层数据是个对象，里面还有个对象，就拷贝不到，但是深拷贝是利用递归原理实现的，可以拷贝到深层次内容")]),a._v(" "),v("p",[a._v("浅拷贝是拷贝的对象的属性引用，不是整个属性，但是深拷贝是把整个对象拷贝，再次操作不会对原对象产生任何影响")]),a._v(" "),v("h2",{attrs:{id:"export-和-export-default-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#export-和-export-default-的区别"}},[a._v("#")]),a._v(" export 和 export default 的区别")]),a._v(" "),v("p",[a._v("两者都是用来导出对象使用的,导出对象可以使用 import 来引入，但是在一个文件中 export 和 import 可以使用多次，但是 export default 只能使用一次")]),a._v(" "),v("p",[a._v("通过 export 方式导入，导入时必须要加 {}, export default 则不需要")]),a._v(" "),v("p",[a._v("export 能直接导出变量表达式，export default不行。")]),a._v(" "),v("h2",{attrs:{id:"require-和-import-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#require-和-import-的区别"}},[a._v("#")]),a._v(" require 和 import 的区别")]),a._v(" "),v("p",[a._v("require 是 commonJS 提供的规范，动态加载")]),a._v(" "),v("p",[a._v("import 是ES6新规范，静态加载，导入的方法更多，但是需要借用 babel 模块解析")]),a._v(" "),v("p",[a._v("现 node.js 对 ES6 支持不够强，依旧需要使用 require 导入")]),a._v(" "),v("h2",{attrs:{id:"单向数据流-双向数据流"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#单向数据流-双向数据流"}},[a._v("#")]),a._v(" 单向数据流 && 双向数据流")]),a._v(" "),v("p",[a._v("React 采用的是单向数据流绑定 单向数据指的是组件不会改变接收到的数据，它们只会监听数据的变化，当组件的更新机制触发后，会使用新值重新渲染")]),a._v(" "),v("p",[a._v("Vue 采用的是双向数据流绑定 双向数据指的就是视图和数据绑定，数据改变，视图改变")]),a._v(" "),v("h2",{attrs:{id:"on-bind-live-之间的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#on-bind-live-之间的区别"}},[a._v("#")]),a._v(" on bind live 之间的区别")]),a._v(" "),v("p",[a._v("这三者都是用来绑定事件的，bind 和 live 都已经被 jQuery 弃用，都存在缺陷问题，推荐使用 on 来绑定事件，使事件绑定方式统一。")]),a._v(" "),v("h2",{attrs:{id:"观察者模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式"}},[a._v("#")]),a._v(" 观察者模式")]),a._v(" "),v("p",[a._v("观察者模式就是一种一对多的关系，一个对象同时被多个对象监听，如果当一个对象被修改时，会自动通知他的依赖对象，观察者模式属于行为模式,行为型模式关注的是对象之间的通讯，观察者模式就是观察者和被观察者之间的通讯。\n它定义了四种角色: 抽象主题，具体主题，抽象观察者，具体观察者")]),a._v(" "),v("h2",{attrs:{id:"active-class是哪个组件的属性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#active-class是哪个组件的属性"}},[a._v("#")]),a._v(" active-class是哪个组件的属性")]),a._v(" "),v("p",[a._v("router-link")]),a._v(" "),v("h2",{attrs:{id:"怎么获取vue-router动态参数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#怎么获取vue-router动态参数"}},[a._v("#")]),a._v(" 怎么获取vue-router动态参数")]),a._v(" "),v("p",[a._v("$route.params")]),a._v(" "),v("h2",{attrs:{id:"vue-router有哪几种导航钩子"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-router有哪几种导航钩子"}},[a._v("#")]),a._v(" vue-router有哪几种导航钩子")]),a._v(" "),v("p",[a._v("有全局导航钩子和路由独享的钩子")]),a._v(" "),v("p",[a._v("全局：\nbeforeEach\nafterEach")]),a._v(" "),v("p",[a._v("局部：\nbeforeRouteEnter\nbeforeRouteUpdate\nbeforeRouteLeave")]),a._v(" "),v("h2",{attrs:{id:"map-和-set-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#map-和-set-的区别"}},[a._v("#")]),a._v(" Map 和 Set 的区别")]),a._v(" "),v("p",[a._v("Set 因为自身不能重复的特性，多数用来去重使用")]),a._v(" "),v("p",[a._v("Map 是一组键值对的结构，具有极快的查找速度")]),a._v(" "),v("h2",{attrs:{id:"route-和-router-的区别是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#route-和-router-的区别是什么"}},[a._v("#")]),a._v(" $route 和 $router 的区别是什么")]),a._v(" "),v("p",[v("code",[a._v("$route")]),a._v(" 是“路由信息对象”，包括path，params，hash，query，fullPath，matched，name等路由信息参数。")]),a._v(" "),v("p",[a._v("而 "),v("code",[a._v("$router")]),a._v(" 是“路由实例”对象包括了路由的跳转方法，钩子函数等。")]),a._v(" "),v("h2",{attrs:{id:"怎么让谷歌支持小于12px的文字"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#怎么让谷歌支持小于12px的文字"}},[a._v("#")]),a._v(" 怎么让谷歌支持小于12px的文字")]),a._v(" "),v("p",[a._v("可以加谷歌前缀。或者使用 transfrom:scale(0.8) 来进行强制缩放")]),a._v(" "),v("h2",{attrs:{id:"如何解决-vue-修改数据页面不刷新的问题（强制刷新）"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何解决-vue-修改数据页面不刷新的问题（强制刷新）"}},[a._v("#")]),a._v(" 如何解决 vue 修改数据页面不刷新的问题（强制刷新）")]),a._v(" "),v("p",[a._v("可以通过 $set() 方法来主动通知 Vue 你的数据该更新了")]),a._v(" "),v("h2",{attrs:{id:"vue-cli怎么新增自定义指令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-cli怎么新增自定义指令"}},[a._v("#")]),a._v(" vue-cli怎么新增自定义指令")]),a._v(" "),v("p",[a._v("通过 directives 属性来绑定自定义指令")]),a._v(" "),v("h2",{attrs:{id:"vue-router两种路由的模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-router两种路由的模式"}},[a._v("#")]),a._v(" vue-router两种路由的模式")]),a._v(" "),v("p",[a._v("hash 和 history")]),a._v(" "),v("h2",{attrs:{id:"vue的动态组件怎么注册"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue的动态组件怎么注册"}},[a._v("#")]),a._v(" vue的动态组件怎么注册")]),a._v(" "),v("p",[a._v(":is 属性")]),a._v(" "),v("h2",{attrs:{id:"拖拽的事件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#拖拽的事件"}},[a._v("#")]),a._v(" 拖拽的事件")]),a._v(" "),v("p",[a._v("drag 事件 html API")]),a._v(" "),v("h2",{attrs:{id:"数组降维"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数组降维"}},[a._v("#")]),a._v(" 数组降维")]),a._v(" "),v("p",[a._v("arr.flat(Infinity) 可以解决这个问题，把多维数组降级为一维数组。")]),a._v(" "),v("h2",{attrs:{id:"class-和-构造函数的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#class-和-构造函数的区别"}},[a._v("#")]),a._v(" Class 和 构造函数的区别")]),a._v(" "),v("ul",[v("li",[a._v("Class 在书写上更倾向于面向对象的写法，更容易阅读和书写，是一种语法糖，")]),a._v(" "),v("li",[a._v("ES5 的构造函数的原型上的属性和方法可以遍历 ES6 不能够遍历")]),a._v(" "),v("li",[a._v("ES6 的类必须通过 new 调用，构造函数则可以不用")]),a._v(" "),v("li",[a._v("Class 不存在变量提升")]),a._v(" "),v("li",[a._v("ES6 的类没有私有方法和私有属性（正在提议中）")]),a._v(" "),v("li",[a._v("Class 多了一个静态方法（static）,里面的this指向的是类本身，静态方法可以被子类继承")]),a._v(" "),v("li",[a._v("ES6 的静态属性和静态方法")]),a._v(" "),v("li",[a._v("ES6 类多了一个new Target 可以判定new 的构造函数")])]),a._v(" "),v("h2",{attrs:{id:"vue-各个组件怎么修改头部-title"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-各个组件怎么修改头部-title"}},[a._v("#")]),a._v(" vue 各个组件怎么修改头部 title")]),a._v(" "),v("p",[a._v("使用 vue-meta 插件")]),a._v(" "),v("h2",{attrs:{id:"网络协议分为哪几层"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#网络协议分为哪几层"}},[a._v("#")]),a._v(" 网络协议分为哪几层")]),a._v(" "),v("p",[a._v("OSI 参考模型将整个网络通信的功能划分为七个层次,它们由低到高分别是物理层(PH)、数据链路层(DL)、网络层(N)、传输层(T)、会话层(S)、表示层(P)、应用层(A)。 每层完成一定的功能，每层都直接为其上层提供服务，并且所有层次都互相支持。")]),a._v(" "),v("h2",{attrs:{id:"怎么检测浏览器的版本"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#怎么检测浏览器的版本"}},[a._v("#")]),a._v(" 怎么检测浏览器的版本")]),a._v(" "),v("p",[a._v("用 "),v("code",[a._v("navigator.userAgent")]),a._v(" 来获取浏览器信息")]),a._v(" "),v("h2",{attrs:{id:"li-与-li-之间有看不见的空白，是什么原因？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#li-与-li-之间有看不见的空白，是什么原因？"}},[a._v("#")]),a._v(" li 与 li 之间有看不见的空白，是什么原因？")]),a._v(" "),v("p",[a._v("把 li 标签转换成行内块就可以了，因为在渲染html的时候，会把换行渲染为空格添加到页面中")]),a._v(" "),v("h2",{attrs:{id:"vuex-页面刷新的时候数据丢失怎么解决"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vuex-页面刷新的时候数据丢失怎么解决"}},[a._v("#")]),a._v(" Vuex 页面刷新的时候数据丢失怎么解决")]),a._v(" "),v("p",[a._v("vuex 数据存放在内在中，刷新会丢失，放在 localStorage 中就好了，可以通过 "),v("code",[a._v("vuex-persistedstate")]),a._v(" 插件来解决")]),a._v(" "),v("h2",{attrs:{id:"vue-router-和-vuex-是在什么阶段挂载上去的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-router-和-vuex-是在什么阶段挂载上去的"}},[a._v("#")]),a._v(" vue-router 和 Vuex 是在什么阶段挂载上去的")]),a._v(" "),v("p",[a._v("都是在 beforeCreate 阶段挂载上去的")])])}),[],!1,null,null,null);t.default=e.exports}}]);