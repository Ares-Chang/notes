(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{393:function(t,a,s){"use strict";s.r(a);var e=s(26),v=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"基本提交流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本提交流程"}},[t._v("#")]),t._v(" 基本提交流程")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("初始化一个仓库 "),s("code",[t._v("git init")]),t._v(" 只做一次就可以，会自动创建一个隐藏的.git文件夹")])]),t._v(" "),s("li",[s("p",[t._v("把工作区修改，保存提交到暂存区 "),s("code",[t._v("git add .")])])]),t._v(" "),s("li",[s("p",[t._v("从暂存区提交到仓库 "),s("code",[t._v("git commit -m [本次改动说明]")])])])]),t._v(" "),s("h2",{attrs:{id:"查看信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看信息"}},[t._v("#")]),t._v(" 查看信息")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("查看 "),s("code",[t._v("git log")]),t._v(" 查看从当前版本开始，到第一次的提交记录")])]),t._v(" "),s("li",[s("p",[t._v("查看所有记录 "),s("code",[t._v("git reflog")]),t._v(" 查看所有的，历史提交记录,包含已恢复信息")])]),t._v(" "),s("li",[s("p",[t._v("查看当前状态 "),s("code",[t._v("git status")])])])]),t._v(" "),s("h2",{attrs:{id:"查看修改内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看修改内容"}},[t._v("#")]),t._v(" 查看修改内容")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("git diff")]),t._v(" 查看工作区(work dict)和暂存区(stage)的区别")])]),t._v(" "),s("h2",{attrs:{id:"版本回退-恢复文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版本回退-恢复文件"}},[t._v("#")]),t._v(" 版本回退 && 恢复文件")]),t._v(" "),s("p",[t._v("恢复 "),s("code",[t._v("git checkout")]),t._v(" 从仓库恢复对应版本")]),t._v(" "),s("ul",[s("li",[t._v("从工作区恢复")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -- 文件名\t// 恢复单个文件\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\t\t\t// 恢复全部文件\n")])])]),s("ul",[s("li",[t._v("从暂存区恢复")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD 文件名\t// 恢复单个文件\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD \t\t\t// 恢复全部文件\n")])])]),s("ul",[s("li",[t._v("从仓库恢复")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout 提交的流水号（只写一部分都行） 文件名\t// 恢复单个文件\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard 提交的流水号（只写一部分都行）\t// 恢复全部文件\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD^\t\t\t\t\t\t\t// 恢复全部文件\n")])])]),s("blockquote",[s("p",[t._v("HEAD    表示当前版本，也就是最新的提交")]),t._v(" "),s("p",[t._v("HEAD^   上一个版本")]),t._v(" "),s("p",[t._v("HEAD^^  上上一个版本")]),t._v(" "),s("p",[t._v("HEAD~100   往上100个版本")])]),t._v(" "),s("h2",{attrs:{id:"查看命令历史"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看命令历史"}},[t._v("#")]),t._v(" 查看命令历史")]),t._v(" "),s("p",[s("code",[t._v("git reflog")]),t._v(" 会打印从当前版本到最开始的所有记录和 "),s("code",[t._v("HEAD@{num}")]),t._v(" ，搭配 "),s("code",[t._v("git reset")]),t._v(" 使用来用做版本回退.")]),t._v(" "),s("h2",{attrs:{id:"分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[t._v("#")]),t._v(" 分支")]),t._v(" "),s("h3",{attrs:{id:"查看分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看分支"}},[t._v("#")]),t._v(" 查看分支")]),t._v(" "),s("ul",[s("li",[t._v("查看本地所有分支 "),s("code",[t._v("git branch")])]),t._v(" "),s("li",[t._v("查看远程所有分支 "),s("code",[t._v("git branch -a")])])]),t._v(" "),s("blockquote",[s("p",[t._v("远程分支会用红色表示出来（如果你开了颜色支持的话）")])]),t._v(" "),s("h3",{attrs:{id:"切换分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#切换分支"}},[t._v("#")]),t._v(" 切换分支")]),t._v(" "),s("ul",[s("li",[t._v("切换分支 "),s("code",[t._v("git chechout 分支名")])]),t._v(" "),s("li",[t._v("新建并切换分支 "),s("code",[t._v("git chechout -b 分支名")])])]),t._v(" "),s("h3",{attrs:{id:"新建分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#新建分支"}},[t._v("#")]),t._v(" 新建分支")]),t._v(" "),s("ul",[s("li",[t._v("添加新分支 "),s("code",[t._v("git branch 分支名")])])]),t._v(" "),s("h3",{attrs:{id:"删除分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除分支"}},[t._v("#")]),t._v(" 删除分支")]),t._v(" "),s("ul",[s("li",[t._v("删除本地分支 "),s("code",[t._v("git branch -d 分支名")])])]),t._v(" "),s("blockquote",[s("p",[t._v("删除分支不会删除代码")])]),t._v(" "),s("ul",[s("li",[t._v("删除远程分支")])]),t._v(" "),s("p",[t._v("方法一：--delete删除远程分支")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin --delete 分支名\n")])])]),s("p",[t._v("方法二：推送一个空分支到远程分支，其实就相当于删除远程分支")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin :分支名\n")])])]),s("h3",{attrs:{id:"合并分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合并分支"}},[t._v("#")]),t._v(" 合并分支")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("合并分支 "),s("code",[t._v("git merge 分支名")]),t._v("\t把指定分支合并到当前分支")])]),t._v(" "),s("li",[s("p",[t._v("变基 "),s("code",[t._v("git rebase 分支名")]),t._v(" 也可以合并分支记录，但当前分支记录会在最前面")])])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("git rebase")]),t._v(" 相对 "),s("code",[t._v("git merge")]),t._v(" 来说 commit 记录会更加的清爽一些")]),t._v(" "),s("p",[t._v("但是工作中大多数使用 "),s("code",[t._v("git merge")]),t._v(" 来完成操作")]),t._v(" "),s("p",[t._v("想要了解具体内容自行 Google")])]),t._v(" "),s("h3",{attrs:{id:"查看仓库代码区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看仓库代码区别"}},[t._v("#")]),t._v(" 查看仓库代码区别")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("git diff")]),t._v(" 不加参数即默认比较工作区与暂存区代码不同并罗列出来")])]),t._v(" "),s("h2",{attrs:{id:"克隆仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#克隆仓库"}},[t._v("#")]),t._v(" 克隆仓库")]),t._v(" "),s("p",[t._v("从远程GitHub上下载仓库")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("git clone [地址]")])])])])}),[],!1,null,null,null);a.default=v.exports}}]);